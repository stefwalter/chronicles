#!/usr/bin/env python3

import argparse
import datetime
import os
import shutil
import sys

import exifread

def normalize(path):
    if path.endswith(".MOV"):
        path = path[:-4] + ".mp4"
    return path

def folder(path, known):
    stamp = 0
    with open(path, 'rb') as f:
        tags = exifread.process_file(f)
    tag = tags.get("Image DateTime")
    if not tag:
        tag = tags.get("EXIF DatetimeOriginal")
    if tag:
        stamp = datetime.datetime.strptime(tag.printable, "%Y:%m:%d %H:%M:%S")
    else:
        stamp = datetime.date.fromtimestamp(os.path.getmtime(path))
    when = stamp.isoformat()[0:10]
    if when in known:
        return os.path.basename(known[when])
    return when

def archive(path, target, known):
    dest = os.path.join(target, folder(path, known))
    os.makedirs(dest, exist_ok=True)
    name = os.path.basename(path)
    sys.stderr.write("{0}\n".format(name))
    if name.endswith(".MOV"):
        name = name[:-4] + ".mp4"
    shutil.move(path, os.path.join(dest, name))

def index(root):
    result = { }
    for directory, unused, names in os.walk(root):
        name = os.path.basename(directory)
        (stamp, unused, description) = name.partition(' ')
        result[stamp] = directory
        for name in names:
            fixed = normalize(name)
            result[name] = result[fixed] = os.path.join(directory, name)
    return result

def compare(path, name, known):
    if name in known:
        if os.stat(path).st_size == os.stat(known[name]).st_size:
            return True
    return False

def process(target, root):
    assert target != root
    known = index(root)
    trash = os.path.join(target, "dup")
    for name in os.listdir(target):
        path = os.path.join(target, name)
        if compare(path, name, known):
            os.makedirs(trash, exist_ok=True)
            shutil.move(path, trash)
        elif os.path.isfile(path):
            archive(path, target, known)

def main(argv):
    parser = argparse.ArgumentParser(description='Organize photos')
    parser.add_argument('root', help="The directory to organize")
    parser.add_argument('target', help="The directory to organize")
    opts = parser.parse_args()

    process(opts.target, opts.root)
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
